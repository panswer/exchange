# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: signup
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}

  environment:
    COGNITO_USER_POOL_ID: { Ref: UserPool }
    COGNITO_CLIENT_ID: { Ref: UserClient }
    stage: ${self:provider.stage, 'dev'}
    authFlow: ADMIN_USER_PASSWORD_AUTH
    currencyRequestTableName: currencyRequest
    currencyRequestTableCurrencyUserRequestIndex: CurrencyUserRequestIndex

  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        # - dynamodb:UpdateItem
        # - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [CurrencyRequest, Arn]

functions:
  signUp:
    handler: src/controllers/signUp.handler
    events:
      - http:
          path: "/sign/up"
          method: post
  signIn:
    handler: src/controllers/signIn.handler
    events:
      - http:
          path: "/sign/in"
          method: post
  currency:
    handler: src/controllers/currency.handler
    events:
      - http:
          path: /currency
          method: post
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"
  getRequests:
    handler: src/controllers/getResquests.handler
    events:
      - http:
          path: /list/requests
          method: get
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes:
          - email

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId: { Ref: UserPool }
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_CUSTOM_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        AccessTokenValidity: 5
        IdTokenValidity: 5

    CurrencyRequest:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.currencyRequestTableName}
        AttributeDefinitions:
          - AttributeName: currencyRequestId
            AttributeType: S
          - AttributeName: username
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: currencyRequestId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.currencyRequestTableCurrencyUserRequestIndex}
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
        TimeToLiveSpecification:
          AttributeName: createdAt
          Enabled: true
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-ignore
  - serverless-offline-local-authorizers-plugin
  - serverless-offline
  - serverless-esbuild
  - serverless-dotenv-plugin
